@page "/new-submission"
@using System.Text.Json.Nodes
@using Organizer.Shared.Enums
@using Organizer.Shared.Views
@inject HttpClient Http

<div class="page-header">
    <h1>New Submission</h1>
</div>

<div class="page-content">
    @if (submitSuccess)
    {
        <h1>Submission successful</h1>
    }
    <EditForm Model="submission" OnSubmit="Submit" FormName="NewSubmissionForm">
        <div class="form-group">
            <label class="text-labels" for="first-name">First Name:</label>
            <InputText @bind-Value="firstName" class="text-inputs" name="first-name" id="first-name"
                placeholder="First Name" />
        </div>
        <div class="form-group">
            <label class="text-labels" for="last-name">Last Name:</label>
            <InputText @bind-Value="lastName" class="text-inputs" name="last-name" id="last-name"
                placeholder="Last Name" />
        </div>

        <div class="form-group">
            <label class="text-labels" for="email">Email:</label>
            <InputText @bind-Value="submission!.SubmitterEmail" class="text-inputs" id="email" name="email"
                placeholder="Email" />
        </div>

        <div class="form-group">
            <label class="text-labels" for="supervisor-name">Supervisor Name:</label>
            <InputText @bind-Value="submission.SupervisorName   " type="text" class="text-inputs" id="supervisor-name"
                name="supervisor-name" placeholder="Supervisor Name" />
        </div>

        <div class="form-group">
            @*FDM or SLA > if SLA, confirmation*@
            <label class="text-labels" for="job-type">Job Type:</label>
            <InputSelect @bind-Value="jobType" class="select-inputs" id="job-type" name="job-type">
                @foreach (var value in Enum.GetValues(typeof(JobType)))
                {
                    <option>@value</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            @*What are the rough dimensions (L x W x H) of your print? (ex: part 1 = 1 mm cube, part 2 = 2 mm x 3 mm x 4
            mm) *@
            <label class="text-labels" for="dimensions">Dimensions:</label>
            <InputText @bind-Value="dimensions" class="text-inputs" id="dimensions" name="dimensions"
                placeholder="Dimensions" />
        </div>

        <div class="form-group">
            @*This part will be (check all that apply) academic, research, personal, functional, decorative
            Please give us details about how you want your part printed. Include infill, shells, supports, etc. If the
            supervisor has any notes, please write them here.*@
            <label class="text-labels" for="notes">Notes:</label>
            <InputTextArea @bind-Value="submission.Notes" class="text-area-inputs text-inputs" id="notes" name="notes"
                placeholder="Notes" />
        </div>

        <div class="form-group">
            @*Upload your part(s) in .STL format in mm, no other formats accepted!*@
            <InputFile OnChange="LoadFiles" multiple />
        </div>
        <button type="submit">Submit</button>
    </EditForm>
</div>


@code {
    [SupplyParameterFromForm]
    private PendingJobSubmission? submission { get; set; }

    private bool submitSuccess = false;
    private string? firstName;
    private string? lastName;
    private JobType jobType;
    private string? dimensions;
    private List<string> filePaths = new();

    protected override void OnInitialized()
    {
        submission ??= new();
    }

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        if (submission is null) throw new Exception("Error in loading page");

        foreach (var file in e.GetMultipleFiles())
        {
            try
            {
                const int maxFileSize = 1024 * 1024 * 70; // 70 MB
                using var content = new MultipartFormDataContent();
                using var stream = file.OpenReadStream(maxAllowedSize: maxFileSize);

                var fileContent = new StreamContent(stream);
                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
                content.Add(fileContent, "file", file.Name);

                HttpResponseMessage response = await Http.PutAsync("api/file", content);
                if (response.IsSuccessStatusCode)
                {
                    JsonNode responseContent = JsonNode.Parse(response.Content.ReadAsStream())!;
                    string tmpFilepath = responseContent!["filePath"]?.ToString() ?? "";
                    filePaths.Add(tmpFilepath);
                    Console.WriteLine(tmpFilepath);
                }
                else
                {
                    throw new Exception("File upload failed.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("File: {FileName} Error: {Error}",
                file.Name, ex.Message);
            }
        }
    }

    private async void Submit()
    {
        if (submission is null) throw new Exception("Error in loading page");

        if (firstName is null || firstName == "" || lastName is null || lastName == "") return;
        // TODO: add form validation

        submission.SubmitterName = firstName + " " + lastName;  
        submission.Notes = dimensions + "; " + submission.Notes;

        Console.WriteLine(filePaths.Count());
        foreach (var f in filePaths)
        {
            submission.Files = filePaths.ToArray();
            Console.WriteLine(f);
        }
        
        HttpResponseMessage response = await Http.PutAsJsonAsync("api/pending", submission);

        if (response.IsSuccessStatusCode)
        {
            submission = new();
            filePaths = new();
            firstName = "";
            lastName = "";
            dimensions = "";
            submitSuccess = true;
        }
    }
}
