@using Organizer.Shared.Views
@inject HttpClient Http

<div class="printer-panel" @onclick="() => expand()">
    @if (printer == null)
    {
        <p>Loading...</p>
    }
    else
    {
        @if (expanded)
        {
            <div class="expanded-col">
                <h3>@printer.PrinterType "@printer.Name"</h3>
            </div>
            <div class="expanded-col">
        <p>@printer.Status</p>
        @if (printer.AssignedJob != null)
                {
                    <p>@printer.AssignedJob.SubmitterName</p>
                    <p>@printer.AssignedJob.SubmitterEmail</p>
                    <p>@printer.AssignedJob.SupervisorName</p>
                    <p>@printer.AssignedJob.Status</p>
                    <p>@printer.AssignedJob.Files</p>
                }
            </div>
            <div class="expanded-col">
                <button @onclick="FinishJob">Complete</button>
                <button @onclick="FailJob">Fail</button>
            </div>
        }
        else
        {
            <span>@printer.Name</span>
            @if (printer.AssignedJob != null)
            {
                <span>Printing job for
                    @printer.AssignedJob.SubmitterName</span>
            }
            else
            {
                <span>@printer.Status</span>
            }
        }
    }
</div>

@code {
    [Parameter]
    public PrinterDetail? printer { get; set; }
    private bool expanded { get; set; } = false;
    private string failMessage = "";

    private void expand()
    {
        expanded = !expanded;
    }

    private async void FinishJob()
    {
        if (printer is null || printer.AssignedJob is null)
            return;

        HttpResponseMessage response = await Http.PatchAsJsonAsync(
            "api/job/finish/" + printer.AssignedJob.Id.ToString(),
            printer.AssignedJob);

        if (response.IsSuccessStatusCode)
            ReloadPrinter();
    }

    private async void FailJob()
    {
        if (printer is null || printer.AssignedJob is null)
            return;

        HttpResponseMessage response = await Http.PatchAsJsonAsync(
            "api/job/fail/" + printer.AssignedJob.Id.ToString(),
            failMessage);
        
        if (response.IsSuccessStatusCode)
            ReloadPrinter();
    }

    private async void ReloadPrinter()
    {
        if (printer is null)
            return;

        PrinterDetail[]? printers = await Http.GetFromJsonAsync<PrinterDetail[]>("api/Printer");
        if (printers != null)
        {
            foreach (PrinterDetail p in printers)
            {
                if (p.Id == printer.Id)
                {
                    printer = p;
                    expand();
                    return;
                }
            }
        }
    }
}